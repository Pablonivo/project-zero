import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ProjectEulerHelper } from './project-euler-helper/project-euler-helper';
declare var MathJax:any; // TODO: Remove if I can't get it to work

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class AppComponent {
  constructor(readonly projectEulerHelper: ProjectEulerHelper) {

  }

  idSelectedProblem: number = 0;
  title = 'project-zero';
  projectEulerProblemDictionary: ProjectEulerProblem[] = [
    {id: 1, title: 'Multiples of 3 and 5', description: 'If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.'},
    {id: 2, title: 'Even Fibonacci numbers', description: 'Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.'},
    {id: 3, title: 'Largest prime factor', description: 'The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?'},
    {id: 4, title: 'Largest palindrome product', description: 'A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99. Find the largest palindrome made from the product of two 3-digit numbers.'},
    {id: 5, title: 'Smallest multiple', description: '2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?'},
    // TODO IVO: Try to render it more nicely with MathJax
    {id: 6, title: 'Sum square difference', description: 'The sum of the squares of the first ten natural numbers is 1^2 + 2^2 + ... + 10^2 = 385. The square of the sum of the first ten natural numbers is (1 + 2 + ... + 10)^2 = 55^2 = 3025. Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640. Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.'},
    {id: 7, title: '10001st prime', description: 'By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13. What is the 10 001st prime number?'},
    {id: 8, title: 'Largest product in a series', description: 'The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.' 
    + '\n73167176531330624919225119674426574742355349194934'
    + '\n96983520312774506326239578318016984801869478851843'
    + '\n85861560789112949495459501737958331952853208805511'
    + '\n12540698747158523863050715693290963295227443043557'
    + '\n66896648950445244523161731856403098711121722383113'
    + '\n 62229893423380308135336276614282806444486645238749'
    + '\n 30358907296290491560440772390713810515859307960866'
    + '\n 70172427121883998797908792274921901699720888093776'
    + '\n 65727333001053367881220235421809751254540594752243'
    + '\n52584907711670556013604839586446706324415722155397'
    + '\n53697817977846174064955149290862569321978468622482'
    + '\n83972241375657056057490261407972968652414535100474'
    + '\n82166370484403199890008895243450658541227588666881'
    + '\n16427171479924442928230863465674813919123162824586'
    + '\n17866458359124566529476545682848912883142607690042'
    + '\n24219022671055626321111109370544217506941658960408'
    + '\n07198403850962455444362981230987879927244284909188'
    + '\n84580156166097919133875499200524063689912560717606'
    + '\n05886116467109405077541002256983155200055935729725'
    + '\n71636269561882670428252483600823257530420752963450'
    + '\nFind the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?'
}
  ]

  getDescriptionById(id: number): string {
    return this.projectEulerProblemDictionary.find(problem => problem.id === id).description;
  }

  getSolutionById(id: number): number | string {
    switch(id){
      case 1:
        return this.projectEulerHelper.solutionOfProblem1;
      case 2:
        return this.projectEulerHelper.solutionOfProblem2;
      case 3:
        return this.projectEulerHelper.solutionOfProblem3;
      case 4:
        return this.projectEulerHelper.solutionOfProblem4;
      case 5:
        return this.projectEulerHelper.solutionOfProblem5;
      case 6:
        return this.projectEulerHelper.solutionOfProblem6;
      case 7:
        return this.projectEulerHelper.solutionOfProblem7;
      case 8:
        return this.projectEulerHelper.solutionOfProblem8;
      default:
        return "No problem selected";
    }
  }

  showResultById(id: number): string {
    switch(id){
      case 1:
      case 2:
      case 3: 
      case 4: 
      case 5:
      case 6: 
      case 7: 
      case 8: return `${this.getSolutionById(id)} (computed in ${this.projectEulerHelper._numberOfMillisecondsUsedForLastComputation} ms)`
      default: return this.getSolutionById(id).toString();
    }
  }

  setSelectedProblemById(id: number): void {
    this.idSelectedProblem = id;

    // TODO IVO: Remove if I can't get it to work
    // MathJax.Hub.Typeset()
    // MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    //MathJax.Hub.Queue(["Typeset",MathJax.Hub,"MathExample"]);
  }
}

export class ProjectEulerProblem {
  id: number;
  title: string;
  description: string;
}
